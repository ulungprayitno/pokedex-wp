{"version":3,"sources":["../../../src/visually-hidden.tsx","../../../src/spinner.tsx","../../../src/button-group.tsx","../../../src/button.tsx","pages/home/index.js","utils/api.js","utils/constant.js","hooks/use-lazy-fetch.js"],"names":["visuallyHiddenStyle","border","clip","height","width","margin","padding","overflow","whiteSpace","position","VisuallyHidden","chakra","baseStyle","VisuallyHiddenInput","spin","keyframes","transform","Spinner","forwardRef","styles","useStyleConfig","omitThemingProps","label","thickness","speed","emptyColor","className","_className","cx","spinnerStyles","display","borderColor","borderStyle","borderRadius","borderWidth","borderBottomColor","borderLeftColor","color","animation","ref","__css","createContext","strict","name","ButtonGroup","spacing","isDisabled","context","size","colorScheme","variant","groupStyles","borderRightRadius","borderLeftRadius","marginLeft","value","role","Button","group","useButtonGroup","iconSpacing","type","as","_focus","mergeWith","zIndex","buttonStyles","appearance","alignItems","justifyContent","transition","userSelect","verticalAlign","outline","isFullWidth","disabled","undefined","data-active","dataAttr","data-loading","leftIcon","marginEnd","isLoading","fontSize","lineHeight","loadingText","opacity","rightIcon","marginStart","ButtonIcon","props","_children","focusable","ButtonSpinner","children","App","history","useHistory","useLazyFetch","data","types","loading","error","fetchData","fetchDataFilter","getTypes","useEffect","compare","mt","p","templateColumns","gap","Array","map","_","index","h","mb","w","placeholder","onChange","e","param","target","split","url","item","bg","boxShadow","cursor","onClick","push","fontWeight","x","i","src","sprites","front_default","right","bottom","id","d","api","axios","create","baseURL","timeout","actionsType","initialState","details","offset","reducer","produce","draft","actions","payload","isEqual","concat","Error","useReducer","state","dispatch","useCallback","a","get","params","limit","res","response","results","Promise","all","pokemon","console","log","kampret","getDetailByName","forms","stats","abilities","weight"],"mappings":"8PAQaA,EAA2C,CACtDC,OADsD,MAEtDC,KAFsD,2BAGtDC,OAHsD,MAItDC,MAJsD,MAKtDC,OALsD,OAMtDC,QANsD,MAOtDC,SAPsD,SAQtDC,WARsD,SAStDC,SAAU,YAOCC,EAAiBC,YAAO,OAAQ,CAC3CC,UAAWZ,IAGT,EAAJ,IACEU,gCAQK,IAAMG,EAAsBF,YAAO,QAAS,CACjDC,UAAWZ,IAGT,EAAJ,IACEa,qCAGF,I,sNChCA,IAAMC,EAAOC,YAAU,CACrB,KAAM,CACJC,UAAW,gBAEb,OAAQ,CACNA,UAAW,oBA+CFC,EAAUC,aAAgC,cACrD,IAAMC,EAASC,YAAe,UAA9B,GAEA,EAQIC,YARJ,OACEC,aADF,MAAM,aAAN,MAEEC,iBAFF,MAAM,MAAN,MAGEC,aAHF,MAAM,QAAN,EAAM,EAAN,EAAM,MAAN,IAKEC,kBALF,MAAM,cAAN,EAMEC,EANF,EAMEA,UANF,E,oIAAA,mEAUMC,EAAaC,YAAG,iBAAtB,GAEMC,EAAgB,EAAH,CACjBC,QADiB,eAEjBC,YAFiB,eAGjBC,YAHiB,QAIjBC,aAJiB,UAKjBC,YALiB,EAMjBC,kBANiB,EAOjBC,gBAPiB,EAQjBC,QACAC,UAAcxB,EAAL,0BATX,GAaA,OACE,gBAAC,IAAD,OACEyB,IADF,EAEEC,MAFF,EAGEd,UAAWC,GAHb,GAMGL,GAAS,uBAPd,OAYE,EAAJ,IACEL,yB,kPCvE4CwB,YAC5C,CACEC,QADF,EAEEC,KAAM,uB,mBAHJ,E,KAAA,E,KASOC,EAAc1B,aAAoC,cAAgB,IACvE,EAAN,EAAM,OAAN,EAAM,cAAN,EAAM,UAAN,EAAM,UADuE,EAC7E,EAKE2B,eAN2E,MACvE,SADuE,EACvE,EAAN,EAAM,WAOJC,EAPF,EAOEA,WAPF,E,oIAAA,qFAWMnB,EAAaC,YAAG,uBAAtB,GAEMmB,EAAU,WACd,iBAAO,CAAEC,OAAMC,cAAaC,UAASJ,gBACrC,CAACE,EAAMC,EAAaC,EAFtB,IAKIC,EAAiC,CACnCrB,QAAS,eAiBX,OAbEqB,EAAc,EAAH,KADb,EACa,CAET,uCAAwC,CAAEC,kBAAmB,GAC7D,6CAA8C,CAAEnB,aAAc,GAC9D,uCAAwC,CAAEoB,iBAAkB,IAGnD,CAET,kCAAmC,CAAEC,WAAYT,KAKnD,mBAAqBU,MAAOR,GAC1B,gBAAC,IAAD,OACER,IADF,EAEEiB,KAFF,QAGEhB,MAHF,EAIEd,UAAWC,GANjB,Q,qVAaE,EAAJ,IACEiB,6BC3BK,IAAMa,EAASvC,aAAkC,cAAgB,MAChEwC,EAAQC,IACRxC,EAASC,YAAe,SAAU,EAAX,KAA7B,IAEA,EAeIC,YAfJ,OACEyB,kBADF,MACY,MAAGY,OAAH,EAAGA,EADT,WAAN,EAAM,EAAN,EAAM,YAAN,EAAM,WAAN,EAAM,cAAN,EAAM,WAAN,EAAM,WAAN,EAAM,YAAN,EAAM,YAAN,IASEE,mBATF,MAAM,SAAN,MAUEC,YAVF,MAAM,SAAN,EAAM,EAAN,EAAM,UAAN,EAAM,UAaJC,EAbF,EAaEA,GAbF,2JAuBMC,EAASC,IAAU,GAAD,eAAK7C,OAAL,EAAKA,EAAM,QAAX,KAA+B,CAAE8C,OAAQ,IAE3DC,EAAkC,EAAH,CACnCpC,QADmC,cAEnCqC,WAFmC,OAGnCC,WAHmC,SAInCC,eAJmC,SAKnCC,WALmC,YAMnCC,WANmC,OAOnC9D,SAPmC,WAQnCD,WARmC,SASnCgE,cATmC,SAUnCC,QAVmC,OAWnCrE,MAAOsE,EAAc,OAAS,QAXK,IAa/B,GAAW,CAAEX,WAGnB,OACE,gBAAC,IAAD,UACEY,SAAU7B,GADZ,EAEEP,IAFF,EAGEuB,GAHF,EAIED,KAAMC,OAAKc,EAJb,EAKEC,cAAaC,YALf,GAMEC,eAAcD,YANhB,GAOEtC,MAPF,EAQEd,UAAWE,YAAG,gBAAiBF,IARjC,GAWGsD,OACC,mBAAYC,UAAWrB,GAZ3B,GAcGsB,GACC,mBACE1C,MAAO,CAAE2C,SAAF,MAAmBC,WAAY,UACtCvC,QAFF,EAGEvB,MAAO+D,GAlBb,GAuBGH,EACGG,GAAe,gBAAC,IAAD,MAAaC,QAAS,GAD/B,GAvBZ,EA0BGC,OACC,mBAAYC,YAAa5B,GA5B/B,OAkCE,EAAJ,IACEH,wBAGF,IAAMgC,EAAiDC,YAAU,IACzD,EAAN,EAAM,SAAYhE,EAAlB,EAAkBA,UAAlB,gCAEMiE,EAAY,oBACd,iBAA6B,CAC3B,eAD2B,EAE3BC,WAAW,IAHjB,EAOMjE,EAAaC,YAAG,sBAAtB,GAEA,OACE,gBAAC,IAAD,aAAuBF,UAAWC,IADpC,IAOE,EAAJ,IACE8D,4BAWF,IAAMI,EAA+CH,YAAU,IACvD,EAAN,EAAM,QAAN,EAAM,QADuD,EAC7D,EAGEI,gBAJ2D,MAIhD,mBAASzD,MAAT,eAA8BjC,MAA9B,MAA0CD,OAAO,QAJD,EACvD,EAAN,EAAM,UAKJqC,EALF,EAKEA,MALF,0DASMb,EAAaC,YAAG,yBAAtB,GAEMC,EAAmC,EAAH,CACpCC,QADoC,OAEpCsC,WAFoC,SAGpC3D,SAAUa,EAAQ,WAHkB,WAIpC2D,UAAW3D,EAAQuB,EAAU,GAJ/B,GAQA,OACE,gBAAC,IAAD,OAAYnB,UAAWC,GAAvB,GAA6Ca,MAAOX,IADtD,IAOE,EAAJ,IACEgE,+B,WClIaE,UA3Ef,WACE,IAAMC,EAAUC,cADH,EAEqEC,cAFrE,0BAEJC,EAFI,EAEJA,KAAMC,EAFF,EAEEA,MAAOC,EAFT,EAESA,QAASC,EAFlB,EAEkBA,MAFlB,OAE4BC,EAF5B,EAE4BA,UAAWC,EAFvC,EAEuCA,gBAAiBC,EAFxD,EAEwDA,SAOrE,OALAC,qBAAU,WACRH,EAAU,CAACI,SAAU,IACrBF,MACA,IAECJ,IAAYF,EAEP,cAAC,IAAD,CAAKS,GAAG,OAAOC,EAAE,OAAjB,SACI,cAAC,IAAD,CAAMC,gBAAgB,iBAAiBC,IAAK,EAA5C,SACK,YAAI,IAAIC,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAAJ,OAChB,cAAC,IAAD,CAAUC,EAAE,QAAoBnF,aAAa,OAApBkF,UAO9Cb,EACQ,cAAC,IAAD,sCAkBT,eAAC,IAAD,CAAKM,GAAG,OAAOC,EAAE,OAAjB,UACI,cAAC,IAAD,CAAKpG,SAAS,WAAW4G,GAAG,OAAOC,EAAE,OAArC,SACE,cAAC,IAAD,CAAQC,YAAY,cAAcC,SAbzB,SAACC,GAChB,IAAIC,EAAQD,EAAEE,OAAOpE,MAAMqE,MAAM,UAAU,GACvCC,EAAG,gBAAYH,GACnBlB,EAAgBqB,IAUV,SACIzB,GAASA,EAAMa,KAAI,SAACa,EAAMX,GAAP,OACnB,wBAAoB5D,MAAOuE,EAAKD,IAAhC,SAAsCC,EAAKnF,MAA9BwE,UAKnB,cAAC,IAAD,CAAML,gBAAgB,iBAAiBC,IAAK,EAA5C,SAEIZ,GAAQA,EAAKc,KAAI,SAACa,GAAD,OACjB,eAAC,IAAD,CAAmBR,EAAE,OAAOS,GAAG,eAAelB,EAAE,OAAO5E,aAAa,MAAM+F,UAAU,KAAKvH,SAAS,WAAWwH,OAAO,UAAUC,SA3BrHvF,EA2BwImF,EAAKnF,KA3BpI,WACxBqD,EAAQmC,KAAR,kBAAwBxF,MA0BlB,UACI,cAAC,IAAD,CAAMwC,SAAS,OAAOiD,WAAW,OAAOf,GAAG,MAA3C,SAAkDS,EAAKnF,OAEnDmF,EAAK1B,MAAMa,KAAI,SAACoB,EAAGC,GAAJ,OAEf,cAAC,IAAD,CAAcP,GAAG,iBAAiBT,EAAE,cAAcT,EAAE,WAAW5E,aAAa,MAAMoF,GAAG,MAArF,SAA4FgB,EAAExE,KAAKlB,MAAzF2F,MAGd,cAAC,IAAD,CAAOC,IAAKT,EAAKU,QAAQC,cAAerB,EAAE,QAAQE,EAAE,OAAOoB,MAAM,IAAIC,OAAO,IAAIlI,SAAS,eARnFqH,EAAKc,IA3BP,IAACjG,OAyCb,cAAC,IAAD,CAAKkG,EAAE,OAAOxB,GAAG,OAAOT,GAAG,OAAOU,EAAE,OAAOjD,eAAe,SAASD,WAAW,SAA9E,SACE,cAACX,EAAD,CAAQR,YAAY,OAAOD,KAAK,KAAKkF,QAhC5B,WACf3B,EAAU,CAACI,SAAS,KA+Bd,8B,gJChEKmC,E,OALHC,EAAMC,OAAO,CACrBC,QCJmB,4BDKnBC,QAAS,MEAPC,EACU,eADVA,EAES,cAFTA,EAGO,YAHPA,EAIgB,qBAJhBA,EAKc,mBAGdC,EAAe,CACnBjD,KAAM,KACNE,SAAS,EACTC,MAAO,KACP+C,QAAS,KACT1C,QAAS,KACTP,MAAO,KACPkD,OAAQ,GAGJC,EAAUC,aAAQ,SAACC,EAAOC,GAAa,IACnC7F,EAAuB6F,EAAvB7F,KADkC,EACX6F,EAAjBC,eAD4B,MAClB,GADkB,EAE1C,OAAQ9F,GACN,KAAKsF,EAGH,OAFAM,EAAMpD,SAAU,OAChBoD,EAAMnD,MAAQ,MAEhB,KAAK6C,EAMH,YALKS,IAAQH,EAAMtD,KAAMwD,EAAQxD,QAC/BsD,EAAMtD,KAAOsD,EAAMtD,KAAOsD,EAAMtD,KAAK0D,OAAOF,EAAQxD,MAAQwD,EAAQxD,KACpEsD,EAAMH,OAASG,EAAMH,OAAS,GAC9BG,EAAMpD,SAAU,IAGpB,KAAK8C,EAMH,YALIS,IAAQH,EAAMJ,QAASM,EAAQxD,QAASyD,IAAQH,EAAM9C,QAASgD,EAAQxD,QACtEwD,EAAQhD,QAAS8C,EAAM9C,QAAUgD,EAAQxD,KACvCsD,EAAMJ,QAAUM,EAAQxD,KAC7BsD,EAAMpD,SAAU,IAGpB,KAAK8C,EAKH,YAJKS,IAAQH,EAAMrD,MAAOuD,EAAQxD,QAChCsD,EAAMrD,MAAQuD,EAAQxD,KACtBsD,EAAMpD,SAAU,IAGpB,KAAK8C,EAGH,OAFAM,EAAMnD,MAAQqD,EAAQrD,WACtBmD,EAAMpD,SAAU,GAElB,QACE,MAAM,IAAIyD,MAAM,2BAIT5D,EAAe,WAAO,IAAD,EACN6D,qBAAWR,EAASH,GADd,mBACzBY,EADyB,KAClBC,EADkB,KAExB9D,EAA0D6D,EAA1D7D,KAAME,EAAoD2D,EAApD3D,QAASC,EAA2C0D,EAA3C1D,MAAO+C,EAAoCW,EAApCX,QAAS1C,EAA2BqD,EAA3BrD,QAASP,EAAkB4D,EAAlB5D,MAAOkD,EAAWU,EAAXV,OAEjD/C,EAAY2D,sBAAW,uCAAE,iCAAAC,EAAA,6DAAQxD,EAAR,EAAQA,QACrCsD,EAAS,CACPpG,KAAMsF,IAFqB,SAKXL,EAAIsB,IAAI,WAAY,CACpCC,OAAQ,CACNC,MAAO3D,EAAU,MAAQ,GACzB2C,YARyB,YAKvBiB,EALuB,4BAYvBC,EAAWD,EAAIpE,KAAKsE,QACnB9D,EAbsB,kCAcR+D,QAAQC,IACvBJ,EAAIpE,KAAKsE,QAAQxD,IAAjB,uCAAqB,WAAMa,GAAN,iBAAAqC,EAAA,sEACHrB,EAAIsB,IAAJ,mBAAoBtC,EAAKnF,OADtB,UACbkE,EADa,SAEb+D,EAAU/D,EAAEV,MAFC,yCAIV,CACLyC,GAAIgC,EAAQhC,GACZjG,KAAMiI,EAAQjI,KACdyD,MAAOwE,EAAQxE,MACfoC,QAASoC,EAAQpC,UARF,2CAArB,wDAfuB,QAczBgC,EAdyB,eA8B3BP,EAAS,CACPpG,KAAMsF,EACNQ,QAAS,CACPxD,KAAMqE,KAjCiB,wBAqC3BP,EAAS,CACPpG,KAAMsF,EACNQ,QAAS,CACPrD,MAAOiE,KAxCgB,4CAAF,sDA4C1B,CAACjB,IAEE9C,EAAkB0D,sBAAW,uCAAE,WAAOrC,GAAP,iBAAAsC,EAAA,6DACnCF,EAAS,CACPpG,KAAMsF,IAER0B,QAAQC,IAAI,CAACC,QAAUlD,IAJY,SAKjBiB,EAAIsB,IAAIvC,GALS,YAK7B0C,EAL6B,yCAOZG,QAAQC,IAC3BJ,EAAIpE,KAAKyE,QAAQ3D,IAAjB,uCAAqB,WAAMa,GAAN,iBAAAqC,EAAA,sEACHrB,EAAIsB,IAAJ,mBAAoBtC,EAAK8C,QAAQjI,OAD9B,UACbkE,EADa,SAEb+D,EAAU/D,EAAEV,MAFC,yCAIV,CACLyC,GAAIgC,EAAQhC,GACZjG,KAAMiI,EAAQjI,KACdyD,MAAOwE,EAAQxE,MACfoC,QAASoC,EAAQpC,UARF,2CAArB,wDAR+B,OAO7BgC,EAP6B,OAqBjCP,EAAS,CACPpG,KAAMsF,EACNQ,QAAS,CACPxD,KAAMqE,KAxBuB,wBA4BjCP,EAAS,CACPpG,KAAMsF,EACNQ,QAAS,CACPrD,MAAOiE,KA/BsB,4CAAF,sDAmChC,IAEGS,EAAkBd,sBAAW,uCAAC,WAAOvH,GAAP,+BAAAwH,EAAA,6DAAaxD,EAAb,gCAClCsD,EAAS,CACPpG,KAAMsF,IAF0B,SAKhBL,EAAIsB,IAAJ,mBAAoBzH,IALJ,YAK5B4H,EAL4B,yCAOT,CACrB5H,KAAM4H,EAAIpE,KAAK8E,MAAM,GAAGtI,KACxByD,MAAOmE,EAAIpE,KAAKC,MAChBoC,QAAS+B,EAAIpE,KAAKqC,QAClB0C,MAAOX,EAAIpE,KAAK+E,MAChBC,UAAWZ,EAAIpE,KAAKgF,UACpBC,OAAQb,EAAIpE,KAAKiF,OACjBjL,OAAQoK,EAAIpE,KAAKhG,QAda,cAO1BqK,EAP0B,OAgBhCP,EAAS,CACPpG,KAAMsF,EACNQ,QAAS,CACPxD,KAAMqE,EACN7D,aApB4B,kBAuBzBR,GAvByB,QAyBhC8D,EAAS,CACPpG,KAAMsF,EACNQ,QAAS,CACPrD,MAAOiE,KA5BqB,4CAAD,sDAgChC,IAEG9D,EAAWyD,sBAAW,sBAAC,8BAAAC,EAAA,6DAC3BF,EAAS,CACPpG,KAAMsF,IAFmB,SAKTL,EAAIsB,IAAJ,SALS,QAKrBG,EALqB,SAOrBC,EAAWD,EAAIpE,KAAKsE,QACxBR,EAAS,CACPpG,KAAMsF,EACNQ,QAAS,CACPxD,KAAMqE,MAIVP,EAAS,CACPpG,KAAMsF,EACNQ,QAAS,CACPrD,MAAOiE,KAlBc,2CAsB1B,IAEH,MAAO,CAAC,CAAElE,UAASC,QAAOH,OAAMkD,UAAS1C,UAASP,SAAS,CAACG,YAAWC,kBAAiBwE,kBAAiBvE","file":"static/js/6.6cad0bb6.chunk.js","sourcesContent":["import { chakra } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\n/**\n * Styles to visually hide an element\n * but make it accessible to screen-readers\n */\nexport const visuallyHiddenStyle: React.CSSProperties = {\n  border: \"0px\",\n  clip: \"rect(0px, 0px, 0px, 0px)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n\n/**\n * Visually hidden component used to hide\n * elements on screen\n */\nexport const VisuallyHidden = chakra(\"span\", {\n  baseStyle: visuallyHiddenStyle,\n})\n\nif (__DEV__) {\n  VisuallyHidden.displayName = \"VisuallyHidden\"\n}\n\n/**\n * Visually hidden input component for designing\n * custom input components using the html `input`\n * as a proxy\n */\nexport const VisuallyHiddenInput = chakra(\"input\", {\n  baseStyle: visuallyHiddenStyle,\n})\n\nif (__DEV__) {\n  VisuallyHiddenInput.displayName = \"VisuallyHiddenInput\"\n}\n\nexport default VisuallyHidden\n","import {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\"\nimport * as React from \"react\"\n\nconst spin = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\",\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\",\n  },\n})\n\ninterface SpinnerOptions {\n  /**\n   * The color of the empty area in the spinner\n   */\n  emptyColor?: string\n  /**\n   * The color of the spinner\n   */\n  color?: string\n  /**\n   * The thickness of the spinner\n   * @example\n   * ```jsx\n   * <Spinner thickness=\"4px\"/>\n   * ```\n   */\n  thickness?: string\n  /**\n   * The speed of the spinner.\n   * @example\n   * ```jsx\n   * <Spinner speed=\"0.2s\"/>\n   * ```\n   */\n  speed?: string\n  /**\n   * For accessibility, it is important to add a fallback loading text.\n   * This text will be visible to screen readers.\n   */\n  label?: string\n}\n\nexport interface SpinnerProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof SpinnerOptions>,\n    SpinnerOptions,\n    ThemingProps<\"Spinner\"> {}\n\n/**\n * Spinner is used to indicate the loading state of a page or a component,\n * It renders a `div` by default.\n *\n * @see Docs https://chakra-ui.com/docs/feedback/spinner\n */\nexport const Spinner = forwardRef<SpinnerProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Spinner\", props)\n\n  const {\n    label = \"Loading...\",\n    thickness = \"2px\",\n    speed = \"0.45s\",\n    color,\n    emptyColor = \"transparent\",\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-spinner\", className)\n\n  const spinnerStyles = {\n    display: \"inline-block\",\n    borderColor: \"currentColor\",\n    borderStyle: \"solid\",\n    borderRadius: \"99999px\",\n    borderWidth: thickness,\n    borderBottomColor: emptyColor,\n    borderLeftColor: emptyColor,\n    color,\n    animation: `${spin} ${speed} linear infinite`,\n    ...styles,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      __css={spinnerStyles}\n      className={_className}\n      {...rest}\n    >\n      {label && <VisuallyHidden>{label}</VisuallyHidden>}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Spinner.displayName = \"Spinner\"\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface ButtonGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"ButtonGroup\"> {\n  /**\n   * If `true`, the borderRadius of button that are direct children will be altered\n   * to look flushed together\n   */\n  isAttached?: boolean\n  /**\n   * If `true`, all wrapped button will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The spacing between the buttons\n   * @default '0.5rem'\n   * @type SystemProps[\"marginRight\"]\n   */\n  spacing?: SystemProps[\"marginRight\"]\n}\n\ninterface ButtonGroupContext extends ThemingProps<\"ButtonGroup\"> {\n  isDisabled?: boolean\n}\n\nconst [ButtonGroupProvider, useButtonGroup] = createContext<ButtonGroupContext>(\n  {\n    strict: false,\n    name: \"ButtonGroupContext\",\n  },\n)\n\nexport { useButtonGroup }\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, \"div\">((props, ref) => {\n  const {\n    size,\n    colorScheme,\n    variant,\n    className,\n    spacing = \"0.5rem\",\n    isAttached,\n    isDisabled,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__group\", className)\n\n  const context = React.useMemo(\n    () => ({ size, colorScheme, variant, isDisabled }),\n    [size, colorScheme, variant, isDisabled],\n  )\n\n  let groupStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n  }\n\n  if (isAttached) {\n    groupStyles = {\n      ...groupStyles,\n      \"> *:first-of-type:not(:last-of-type)\": { borderRightRadius: 0 },\n      \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n      \"> *:not(:first-of-type):last-of-type\": { borderLeftRadius: 0 },\n    }\n  } else {\n    groupStyles = {\n      ...groupStyles,\n      \"& > *:not(style) ~ *:not(style)\": { marginLeft: spacing },\n    }\n  }\n\n  return (\n    <ButtonGroupProvider value={context}>\n      <chakra.div\n        ref={ref}\n        role=\"group\"\n        __css={groupStyles}\n        className={_className}\n        {...rest}\n      />\n    </ButtonGroupProvider>\n  )\n})\n\nif (__DEV__) {\n  ButtonGroup.displayName = \"ButtonGroup\"\n}\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type = \"button\",\n    spinner,\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      as={as}\n      type={as ? undefined : type}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>\n      )}\n      {isLoading && (\n        <ButtonSpinner\n          __css={{ fontSize: \"1em\", lineHeight: \"normal\" }}\n          spacing={iconSpacing}\n          label={loadingText}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {isLoading\n        ? loadingText || <chakra.span opacity={0}>{children}</chakra.span>\n        : children}\n      {rightIcon && !isLoading && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nconst ButtonIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = React.isValidElement(children)\n    ? React.cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span {...rest} className={_className}>\n      {_children}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const spinnerStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    marginEnd: label ? spacing : 0,\n    ...__css,\n  }\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n","import { useLazyFetch } from '../../hooks/use-lazy-fetch';\r\nimport { Box, Grid, Image, Skeleton, Text, Select, Button } from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  const history = useHistory();\r\n  const [{ data, types, loading, error }, {fetchData, fetchDataFilter, getTypes}] = useLazyFetch();\r\n\r\n  useEffect(() => {\r\n    fetchData({compare : false});\r\n    getTypes()\r\n  },[]);\r\n  \r\n  if(loading && !data){\r\n      return (\r\n          <Box mt='76px' p='24px'>\r\n              <Grid templateColumns=\"repeat(4, 1fr)\" gap={6}>\r\n                  {[...new Array(20)].map((_, index) => (\r\n                          <Skeleton h='200px' key={index} borderRadius='8px'/>\r\n                  ))}\r\n              </Grid>\r\n          </Box>\r\n      )\r\n  }\r\n\r\n  if(error){\r\n      return <Text> Something went wrong! </Text>\r\n  }\r\n\r\n  const getDetail = (name) => () => {\r\n      history.push(`/detail/${name}`)\r\n  }\r\n\r\n  const onFilter = (e) => {\r\n    let param = e.target.value.split('/type/')[1];\r\n    let url = `/type/${param}`\r\n    fetchDataFilter(url)\r\n  }\r\n\r\n  const loadMore = () => {\r\n    fetchData({compare: false})\r\n  }\r\n\r\n  return (\r\n    <Box mt='76px' p='24px'>\r\n        <Box position='relative' mb='16px' w='auto'>\r\n          <Select placeholder=\"Filter Type\" onChange={onFilter}>\r\n            { types && types.map((item, index) => (\r\n              <option key={index} value={item.url}>{item.name}</option>\r\n            ))}\r\n          </Select>\r\n        </Box>\r\n\r\n        <Grid templateColumns=\"repeat(4, 1fr)\" gap={6}>\r\n            {\r\n            data && data.map((item) => (\r\n            <Box key={item.id} w=\"100%\" bg=\"whatsapp.300\" p='16px' borderRadius='8px' boxShadow='lg' position='relative' cursor='pointer' onClick={getDetail(item.name)}>\r\n                <Text fontSize='32px' fontWeight='bold' mb='4px'>{item.name}</Text>\r\n                {\r\n                    item.types.map((x, i) => (\r\n\r\n                    <Box key={i}  bg='whiteAlpha.800' w='fit-content' p='4px 16px' borderRadius='8px' mb='4px'>{x.type.name}</Box>\r\n                    ))\r\n                }\r\n                <Image src={item.sprites.front_default} h='120px' w='auto' right='0' bottom='0' position='absolute' />\r\n                </Box>\r\n            ))\r\n            }\r\n        </Grid>\r\n\r\n        <Box d='flex' mb='16px' mt='16px' w='auto' justifyContent='center' alignItems='center'>\r\n          <Button colorScheme=\"teal\" size=\"md\" onClick={loadMore}>\r\n              Load More\r\n          </Button>\r\n        </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import axios  from \"axios\";\r\nimport { BaseUrl } from \"./constant\";\r\n\r\nconst api = axios.create({\r\n    baseURL: BaseUrl,\r\n    timeout: 10000\r\n})\r\n\r\nexport default api","export const BaseUrl = 'https://pokeapi.co/api/v2';","import { useCallback, useReducer, useState } from 'react'\r\nimport produce from 'immer'\r\nimport isEqual from 'react-fast-compare'\r\nimport api from '../utils/api'\r\n\r\nconst actionsType = {\r\n  SET_FETCHING: 'SET_FETCHING',\r\n  SET_SUCCESS: 'SET_SUCCESS',\r\n  SET_ERROR: 'SET_ERROR',\r\n  SET_SUCCESS_DETAIL: 'SET_SUCCESS_DETAIL',\r\n  SET_SUCCESS_TYPE: 'SET_SUCCESS_TYPE',\r\n}\r\n\r\nconst initialState = {\r\n  data: null,\r\n  loading: false,\r\n  error: null,\r\n  details: null,\r\n  compare: null,\r\n  types: null,\r\n  offset: 0\r\n}\r\n\r\nconst reducer = produce((draft, actions) => {\r\n  const { type, payload = {} } = actions\r\n  switch (type) {\r\n    case actionsType.SET_FETCHING:\r\n      draft.loading = true\r\n      draft.error = null\r\n      return\r\n    case actionsType.SET_SUCCESS:\r\n      if (!isEqual(draft.data, payload.data)) {\r\n        draft.data = draft.data ? draft.data.concat(payload.data) : payload.data \r\n        draft.offset = draft.offset + 20\r\n        draft.loading = false\r\n      }\r\n      return\r\n    case actionsType.SET_SUCCESS_DETAIL:\r\n      if(!isEqual(draft.details, payload.data) || isEqual(draft.compare, payload.data)) {\r\n        if(payload.compare) draft.compare = payload.data\r\n        else draft.details = payload.data\r\n        draft.loading = false\r\n      }\r\n      return\r\n    case actionsType.SET_SUCCESS_TYPE:\r\n      if (!isEqual(draft.types, payload.data)) {\r\n        draft.types = payload.data\r\n        draft.loading = false\r\n      }\r\n      return\r\n    case actionsType.SET_ERROR:\r\n      draft.error = payload.error\r\n      draft.loading = false\r\n      return\r\n    default:\r\n      throw new Error('Unknown action type')\r\n  }\r\n})\r\n\r\nexport const useLazyFetch = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const { data, loading, error, details, compare, types, offset } = state\r\n  \r\n  const fetchData = useCallback( async ({compare}) => {\r\n    dispatch({\r\n      type: actionsType.SET_FETCHING,\r\n    });\r\n\r\n    const res = await api.get('/pokemon', {\r\n      params: {\r\n        limit: compare ? 10220 : 20,\r\n        offset\r\n      } \r\n    });\r\n    if(res){\r\n      let response = res.data.results;\r\n      if (!compare) {\r\n        response = await Promise.all(\r\n          res.data.results.map(async item => {\r\n            const p = await api.get(`/pokemon/${item.name}`)\r\n            const pokemon = p.data\r\n            if(pokemon){\r\n              return {\r\n                id: pokemon.id,\r\n                name: pokemon.name,\r\n                types: pokemon.types,\r\n                sprites: pokemon.sprites\r\n              }            \r\n            }\r\n          })\r\n        ) \r\n      }\r\n\r\n      dispatch({\r\n        type: actionsType.SET_SUCCESS,\r\n        payload: {\r\n          data: response,\r\n        },\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: actionsType.SET_ERROR,\r\n        payload: {\r\n          error: res,\r\n        },\r\n      })\r\n    }\r\n  }, [offset]);\r\n\r\n  const fetchDataFilter = useCallback( async (url) => {\r\n    dispatch({\r\n      type: actionsType.SET_FETCHING,\r\n    });\r\n    console.log({kampret : url})\r\n    const res = await api.get(url);\r\n    if(res){\r\n      let response = await Promise.all(\r\n        res.data.pokemon.map(async item => {\r\n          const p = await api.get(`/pokemon/${item.pokemon.name}`)\r\n          const pokemon = p.data\r\n          if(pokemon){\r\n            return {\r\n              id: pokemon.id,\r\n              name: pokemon.name,\r\n              types: pokemon.types,\r\n              sprites: pokemon.sprites\r\n            }            \r\n          }\r\n        })\r\n      )\r\n      dispatch({\r\n        type: actionsType.SET_SUCCESS,\r\n        payload: {\r\n          data: response,\r\n        },\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: actionsType.SET_ERROR,\r\n        payload: {\r\n          error: res,\r\n        },\r\n      })\r\n    }\r\n  }, []);\r\n\r\n  const getDetailByName = useCallback(async (name, compare = false) => {\r\n    dispatch({\r\n      type: actionsType.SET_FETCHING,\r\n    });\r\n\r\n    const res = await api.get(`/pokemon/${name}`);\r\n    if(res){\r\n      const response = await {\r\n        name: res.data.forms[0].name,\r\n        types: res.data.types,\r\n        sprites: res.data.sprites,\r\n        stats: res.data.stats,\r\n        abilities: res.data.abilities,\r\n        weight: res.data.weight,\r\n        height: res.data.height\r\n      }\r\n      dispatch({\r\n        type: actionsType.SET_SUCCESS_DETAIL,\r\n        payload: {\r\n          data: response,\r\n          compare,\r\n        },\r\n      });\r\n      return data;\r\n    } else {\r\n      dispatch({\r\n        type: actionsType.SET_ERROR,\r\n        payload: {\r\n          error: res,\r\n        },\r\n      })\r\n    }\r\n  }, []);\r\n\r\n  const getTypes = useCallback(async () => {\r\n    dispatch({\r\n      type: actionsType.SET_FETCHING,\r\n    });\r\n\r\n    const res = await api.get(`/type`);\r\n    if(res){\r\n      let response = res.data.results;\r\n      dispatch({\r\n        type: actionsType.SET_SUCCESS_TYPE,\r\n        payload: {\r\n          data: response,\r\n        },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionsType.SET_ERROR,\r\n        payload: {\r\n          error: res,\r\n        },\r\n      })\r\n    }\r\n  }, []);\r\n\r\n  return [{ loading, error, data, details, compare, types }, {fetchData, fetchDataFilter, getDetailByName, getTypes}]\r\n}"],"sourceRoot":""}